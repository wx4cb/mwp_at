#include <MegunoLink.h>
#include <CommandHandler.h>
#include <TCPCommandHandler.h>
#include <ArduinoTimer.h>
#include <CircularBuffer.h>
#include <EEPROMStore.h>
#include <Filter.h>

#include "printf.h"

#include "mwp_lsm303.h"
#ifndef __UTIL_H__
  #include "util.h"
#endif

#include <Adafruit_GPS.h>
#include <SoftwareSerial.h>

// Connect the GPS Power pin to 5V
// Connect the GPS Ground pin to ground
// Connect the GPS TX (transmit) pin to Digital 8
// Connect the GPS RX (receive) pin to Digital 7

// you can change the pin numbers to match your wiring:
SoftwareSerial mySerial(8, 7);
Adafruit_GPS GPS(&mySerial);
// Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
// Set to 'true' if you want to debug and listen to the raw GPS sentences
#define GPSECHO  true

// This is our continuous rotation servo
#include "Servo.h"
Servo servo;

// Servo constants
int NORTH = 0;
int SERVO_STOP = 90;  // change this value to achieve minimum rotation!
int SERVO_PAN = 4;
int SERVO_TILT = 5;

// Pi for calculations - not the raspberry type
const float Pi = 3.14159;

// Current Target and Last Heading
static int target;
static int lasttarget;
// Other Data
float UAV_LAT = 0;
float UAV_LONG = 0;
float UAV_DISTANCE = 0;
float UAV_ELEVATION = 0;
float UAV_AZIMUTH = 0;
float UAV_BEARING = 0;

// Command Processor
// Attach a new CmdMessenger object to the default Serial port
CommandHandler<> SerialCommandHandler;

// Commands we send from the PC and want to receive on the Arduino.
// We must define a callback function in our Arduino program for each entry in the list below.
void attachCommandCallbacks()
{
  Serial.println("Attaching Callbacks");
  // Attach callback methods
  // Setup the serial commands we can repond to
  SerialCommandHandler.AddCommand(F("UAV"), OnUAV);
  SerialCommandHandler.AddCommand(F("STAT"), OnStatus);

  // ignore case
  SerialCommandHandler.AddCommand(F("uav"), OnUAV);
  SerialCommandHandler.AddCommand(F("stat"), OnStatus);

  SerialCommandHandler.SetDefaultHandler(Cmd_Unknown);

}

// ------------------  C A L L B A C K S -----------------------
void OnUAV(CommandParameter &Parameters)
{
    Serial.println("New Update: ");
  // !UAV 50.9100974 -1.5351514 15.0 -8.0 137.795275591
  // Retreive first parameter as float
  UAV_LAT = atof(Parameters.NextParameter());
    UAV_LONG = atof(Parameters.NextParameter());
  UAV_DISTANCE = atof(Parameters.NextParameter());
  UAV_AZIMUTH= Parameters.NextParameterAsInteger(UAV_AZIMUTH);
  UAV_BEARING= Parameters.NextParameterAsInteger(UAV_BEARING);
  Serial.print("Azimuths:");
  Serial.println(UAV_AZIMUTH);
  Serial.print("Bearing:");
  Serial.println(UAV_BEARING);
}

void OnStatus(CommandParameter &Parameters) {
  ReadLSM303();
  
  DoIMUStatus();
}

void Cmd_Unknown()
{
  Serial.println(F("I don't understand"));
}


void MoveServo(int t) {
  ReadLSM303();
  int current = LSM303_GetHeading(mag);
  
  // Calculate the error between tha measured heading and the target heading.
  float error = current - t;
  if (error > 180)
  {
    error = error - 360;  // for angles > 180, correct in the opposite direction.
  }
  // A non-zero difference between the heading and the 
  // targetHeading will bias the servoNeutral value and 
  // cause the servo to rotate back toward the targetHeading.
  // The divisor is to reduce the reaction speed and avoid oscillations
  servo.write(SERVO_STOP + error / 4 );

  char buf[100];
  char tmp[10];
  floatToString(tmp, error, 2, true);

  if (GPS.fix) { 
    char lat[10];
    char lon[10];
    floatToString(lat, GPS.lat, 2, true);
    floatToString(lon, GPS.lon, 2, true);

    snprintf(buf, sizeof(buf), "%d:%d:%d: %s / %s - Current: %d - Target: %d - Error: %s\n", GPS.hour, GPS.minute, GPS.seconds, lat, lon, current, t, tmp);
  } else {
    snprintf(buf, sizeof(buf), "NOFIX %d -  Current: %d - Target: %d - Error: %s\n", GPS.fix, current, t, tmp);
  }
  Serial.print(buf);
}




void AdaFruit_GPS_Init(void) {
  // Setup Adafruit GPS Library
  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);

  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time

  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ);   // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  //GPS.sendCommand(PGCMD_ANTENNA);

  delay(1000);
  // Ask for firmware version
  mySerial.println(PMTK_Q_RELEASE);
}


// Arduino Setup Function
void setup(void) 
{
  Serial.begin(115200);

  // Init IMU
  Serial.println("\nInitialize LSM303C");  
  if (myIMU.begin() != IMU_SUCCESS)
  {
    Serial.println("Failed setup.");
    while(1);
  } else { ReadLSM303(); }

  Serial.println("Initialise GPS and Logger");
  AdaFruit_GPS_Init();
  
  // Attach Servo
  Serial.println("Connecting to servos");
  servo.attach(SERVO_PAN);  // attaches the servo on pin 9 to the servo object 
  servo.write(SERVO_STOP);  
  
  attachCommandCallbacks();

  DoIMUStatus();
}

String inString = "";    // string to hold input

void loop(void) 
{
  ReadLSM303();

  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    //Serial.println(GPS.lastNMEA());   // this also sets the newNMEAreceived() flag to false

    if (!GPS.parse(GPS.lastNMEA()))   // this also sets the newNMEAreceived() flag to false
      return;  // we can fail to parse a sentence in which case we should just wait for another
  }
  
   // Process incoming serial data, and perform callbacks
  SerialCommandHandler.Process();

  
  MoveServo(UAV_BEARING);

  delay(250);
}
